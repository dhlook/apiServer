package com.slamdh.apiserver.controller;


import java.util.ArrayList;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.slamdh.apiserver.service.AgentService; 
import com.slamdh.apiserver.utils.CommonUtils;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

@Controller
public class AgentController {
	static final Logger logger = LoggerFactory.getLogger(AgentController.class);
	
	@Autowired
	AgentService agentService;
	
	// 에이전트 목록 조회 
	@RequestMapping({"/api/Agent/selectagentList"})
	@ResponseBody
	ArrayList<Map<String, Object>>  getAgentList(HttpServletRequest request, HttpServletResponse response) {
				
		Map<String, Object> params = new HashMap<String, Object>();
		ArrayList<Map<String, Object>>  resultMap = new ArrayList<Map<String, Object>> ();
		
		try {
			params.put("customId", request.getParameter("customId"));
			params.put("groupId", request.getParameter("groupId"));
			params.put("wheresql", request.getParameter("wheresql"));
			
			
			resultMap = agentService.SelectAgentLists(params);
		} catch(Exception e) {
			logger.info(e.getMessage());
		}			
		return  resultMap;		
	}		
	
	// 사용자 정보 수정
	@RequestMapping({"/api/Agent/updateagent"})
	@ResponseBody
	int setAgentUpdate(HttpServletRequest request, HttpServletResponse response) {
								
		Map<String, Object> params = new HashMap<String, Object>();
		int  resultMap = 0;
		  
		try {
			params.put("customId", request.getParameter("customId"));
			params.put("agentId", request.getParameter("agentId"));
			params.put("username", request.getParameter("username"));
			params.put("email", request.getParameter("email"));
			params.put("phone", request.getParameter("phone"));
			params.put("cellphone", request.getParameter("cellphone"));			
			params.put("groupid", request.getParameter("groupid"));
			  
			resultMap = agentService.UpdateAgentData(params);
		} catch(Exception e) {
			logger.info(e.getMessage());
		}			
		return  resultMap;		
	} 
	
	
	// 사용자 정책 적용
	@RequestMapping({"/api/Agent/agentpolicyapply"})
	@ResponseBody
	int setAgentPolicyApply(HttpServletRequest request, HttpServletResponse response) {
		int  ret = 0;			
		
	    try {		
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("agentlist", request.getParameter("agentlist"));
		    params.put("policydata", request.getParameter("policydata"));		
		    params.put("customId", request.getParameter("customId"));
			 // 정책 적용은 common service에서 처리할 수 있도록 변경시켜 준다.
	    	ret = agentService.AgentPolicyApply(params);	
	    } catch(Exception e) {
			logger.info(e.getMessage());
		 }
	     
		return ret; 
	}		
	
	
	// 에이전트 삭제 
	@RequestMapping({"/api/Agent/insertagentuninstall"})
	@ResponseBody
	int setAgentUninstall(HttpServletRequest request, HttpServletResponse response) {
		int  ret = 0;			
		
	    try {		
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("customId", request.getParameter("customId"));
		    params.put("adminId", request.getParameter("adminId"));		
		    params.put("agentId", request.getParameter("agentId"));
		    params.put("command_type", request.getParameter("command_type"));
		    
			 // 정책 적용은 common service에서 처리할 수 있도록 변경시켜 준다.
	    	ret = agentService.UninstallAgentData(params);	
	    } catch(Exception e) {
			logger.info(e.getMessage());
		 }
	     
		return ret; 
	}	
	
	
	
	// 에이전트 목록 조회 
	@RequestMapping({"/api/Agent/selectUninstallReqAgent"})
	@ResponseBody
	ArrayList<Map<String, Object>>  getUninstallAgentList(HttpServletRequest request, HttpServletResponse response) {
				
		Map<String, Object> params = new HashMap<String, Object>();
		ArrayList<Map<String, Object>>  resultMap = new ArrayList<Map<String, Object>> ();
		
		try {
			params.put("customId", request.getParameter("customId"));				
			
			resultMap = agentService.selectUninstallAgent(params);
		} catch(Exception e) {
			logger.info(e.getMessage());
		}			
		return  resultMap;		
	}			
	
	
	// 에이전트 삭제 요청에 대한 승인 / 반려 
	@RequestMapping({"/api/Agent/getUninstallResult"})
	@ResponseBody
	int setAgentUninstallResult(HttpServletRequest request, HttpServletResponse response) {
		int  ret = 0;		
	
	    try {		
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("customId", request.getParameter("customId"));
		    params.put("agentlist", request.getParameter("agentlist"));		
		    params.put("cancleresult", request.getParameter("cancleresult"));
		    params.put("checkflag", request.getParameter("checkflag"));
		    params.put("command_type", request.getParameter("command_type"));
		    params.put("adminId", request.getParameter("adminId"));  		    
		     		    
			 // 정책 적용은 common service에서 처리할 수 있도록 변경시켜 준다.
	    	ret = agentService.UninstallAgentResult(params); 
	    } catch(Exception e) {
			logger.info(e.getMessage());
		 }
	     
		return ret; 
	}		
	
	@RequestMapping({"/api/Agent/agentdeletedatabase"})
	@ResponseBody
	int setOfflineAgentDeleteDatabase(HttpServletRequest request, HttpServletResponse response) {
		int  ret = 0;		
	
	    try {		
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("customId", request.getParameter("customId"));
		    params.put("agentlist", request.getParameter("agentlist"));				    
		    params.put("adminId", request.getParameter("adminId"));  		    
		     		    
			 // 정책 적용은 common service에서 처리할 수 있도록 변경시켜 준다.
	        ret = agentService.OfflineAgentDeleteDatabase(params); 	    	
	    
	    } catch(Exception e) {
			logger.info(e.getMessage());
		 }
	     
		return ret; 
	}
	
	
	// 에이전트 목록 조회 
	@RequestMapping({"/api/Agent/agentdeletehistory"})
	@ResponseBody
	ArrayList<Map<String, Object>>  getAgentDatabaseDeleteHistoryList(HttpServletRequest request, HttpServletResponse response) {
				
		Map<String, Object> params = new HashMap<String, Object>();
		ArrayList<Map<String, Object>>  resultMap = new ArrayList<Map<String, Object>> ();
		
		try {
			params.put("customId", request.getParameter("customId"));				
			params.put("agentName", request.getParameter("agentName"));
			
			resultMap = agentService.selectAgentDeleteList(params);
		} catch(Exception e) {
			logger.info(e.getMessage());
		}			
		return  resultMap;		
	}	
	
	
	
		
	 
	
	
	 
}
